import sys
import re

import numpy as np
from pandas.core.frame import DataFrame

from pandas._typing import Scalar, ArrayLike, JoinType, FrameOrSeries

from pandas.core.base import NoNewAttributesMixin as NoNewAttributesMixin
from pandas.core.indexes.base import Index
from pandas.core.series import Series
from typing import Any, List, Optional, Union, Iterable, Sequence, Dict, AnyStr, Callable

SeriesOrIndex = Union[Series, Index]

# Literals have only been introduced in version 3.8
if sys.version_info >= (3, 8):
    from typing import Literal
    PadType = Literal['left', 'right', 'both']
    StrSearchSide = Literal['left', 'right']
    StrSideWithBoth = Literal['left', 'right', 'both']
    NormalizeForm = Literal['NFC', 'NFKC', 'NFD', 'NFKD']
    ForbiddenNonStringTypes = Literal['bytes', 'mixed', 'mixed-integer']
else:
    PadType = str
    StrSearchSide = str
    StrSideWithBoth = str
    NormalizeForm = str
    ForbiddenNonStringTypes = str

def cat_core(list_of_columns: List[np.ndarray], sep: str) -> np.ndarray: ...
def cat_safe(list_of_columns: List[np.ndarray], sep: str) -> np.ndarray: ...
def str_count(arr: Any, pat: str, flags: int = ...) -> SeriesOrIndex: ...
def str_contains(arr: Any, pat: str, case: bool = ..., flags: int = ..., na: Scalar = ..., regex: bool = ...) -> SeriesOrIndex: ...
def str_startswith(arr: Any, pat: str, na: Scalar = ...) -> SeriesOrIndex: ...
def str_endswith(arr: Any, pat: str, na: Scalar = ...) -> SeriesOrIndex: ...
def str_replace(arr: Any, pat: Union[str, re.Pattern[str]], repl: Union[str, Callable[[re.Match[str]], str]], n: int = ..., case: Optional[bool] = ..., flags: int = ..., regex: bool = ...) -> SeriesOrIndex: ...
def str_repeat(arr: Any, repeats: Union[int, Sequence[int]]) -> SeriesOrIndex: ...
def str_match(arr: Any, pat: str, case: bool = ..., flags: int = ..., na: Scalar = ...) ->  Union[Series, ArrayLike]: ...
def str_extract(arr: Any, pat: str, flags: int = ..., expand: bool = ...) -> Union[FrameOrSeries, Index]: ...
def str_extractall(arr: Any, pat: str, flags: int = ...) -> DataFrame: ...
def str_get_dummies(arr: Any, sep: str = ...) -> DataFrame: ...
def str_join(arr: Any, sep: str) -> SeriesOrIndex: ...
def str_findall(arr: Any, pat: str, flags: int = ...) -> SeriesOrIndex: ...
def str_find(arr: Any, sub: str, start: int = ..., end: Optional[int] = ..., side: StrSearchSide = ...) -> SeriesOrIndex: ...
def str_index(arr: Any, sub: str, start: int = ..., end: Optional[int] = ..., side: StrSearchSide = ...) -> SeriesOrIndex: ...
def str_pad(arr: Any, width: int, side: StrSideWithBoth = ..., fillchar: str = ...) -> SeriesOrIndex: ...
def str_split(arr: Any, pat: Optional[Union[str, re.Pattern[str]]] = ..., n: Optional[int] = ...) -> Union[FrameOrSeries, Index]: ...
def str_rsplit(arr: Any, pat: Optional[Union[str, re.Pattern[str]]] = ..., n: Optional[int] = ...) -> Union[FrameOrSeries, Index]: ...
def str_slice(arr: Any, start: Optional[int] = ..., stop: Optional[int] = ..., step: Optional[int] = ...) -> SeriesOrIndex: ...
def str_slice_replace(arr: Any, start: Optional[int] = ..., stop: Optional[int] = ..., repl: Optional[str] = ...) -> SeriesOrIndex: ...
def str_strip(arr: Any, to_strip: Optional[str] = ..., side: StrSideWithBoth = ...) -> SeriesOrIndex: ...
def str_wrap(arr: Any, width: int, expand_tabs: bool = ..., replace_whitespace: bool = ..., drop_whitespace: bool = ..., break_long_words: bool = ..., break_on_hyphens: bool = ...) -> SeriesOrIndex: ...
def str_translate(arr: Any, table: Dict[str, str]) -> SeriesOrIndex: ...
def str_get(arr: Any, i: int) -> SeriesOrIndex: ...
def str_decode(arr: Any, encoding: str, errors: str = ...) -> SeriesOrIndex: ...
def str_encode(arr: Any, encoding: str, errors: str = ...) -> SeriesOrIndex: ...
# This is for internal use but still can be used externally
def forbid_nonstring_types(forbidden: Optional[List[ForbiddenNonStringTypes]], name: Optional[str] = ...) -> Callable[..., Any]: ...

class StringMethods(NoNewAttributesMixin):
    def __init__(self, data: Any) -> None: ...
    def __getitem__(self, key: Any) -> SeriesOrIndex: ...
    def __iter__(self) -> Iterable[Any]: ...
    def cat(self, others: Optional[Union[Series, Index, DataFrame, ArrayLike, Iterable[Any]]] = ..., sep: Optional[str] = ..., na_rep: Optional[str] = ..., join: JoinType = ...) -> Union[str, FrameOrSeries]: ...
    def split(self, pat: Optional[str] = ..., n: int = ..., expand: bool = ...) -> Union[FrameOrSeries, Index]: ...
    def rsplit(self, pat: Optional[str] = ..., n: int = ..., expand: bool = ...) -> Union[FrameOrSeries, Index]: ...
    def partition(self, sep: str = ..., expand: bool = ...) -> Union[DataFrame, Series, Index]: ...
    def rpartition(self, sep: str = ..., expand: bool = ...) -> Union[DataFrame, Series, Index]: ...
    def get(self, i: int) -> Series: ...
    def join(self, sep: str) -> SeriesOrIndex: ...
    def contains(self, pat: str, case: bool = ..., flags: int = ..., na: Scalar = ..., regex: bool = ...) -> SeriesOrIndex: ...
    def match(self, pat: str, case: bool = ..., flags: int = ..., na: Scalar = ...) -> Union[Series, ArrayLike]: ...
    def replace(self, pat: Union[str, re.Pattern[str]], repl: Union[str, Callable[[re.Match[str]], str]], n: int = ..., case: Optional[bool] = ..., flags: int = ..., regex: bool = ...) -> SeriesOrIndex: ...
    def repeat(self, repeats: Union[int, Sequence[int]]) -> SeriesOrIndex: ...
    def pad(self, width: int, side: PadType = ..., fillchar: str = ...) -> SeriesOrIndex: ...
    def center(self, width: int, fillchar: str = ...) -> SeriesOrIndex: ...
    def ljust(self, width: int, fillchar: str = ...) -> SeriesOrIndex: ...
    def rjust(self, width: int, fillchar: str = ...) -> SeriesOrIndex: ...
    def zfill(self, width: int) -> SeriesOrIndex: ...
    def slice(self, start: Optional[int] = ..., stop: Optional[int] = ..., step: Optional[int] = ...) -> SeriesOrIndex: ...
    def slice_replace(self, start: Optional[int] = ..., stop: Optional[int] = ..., repl: Optional[str] = ...) -> SeriesOrIndex: ...
    def decode(self, encoding: str, errors: str = ...) -> SeriesOrIndex: ...
    def encode(self, encoding: str, errors: str = ...) -> SeriesOrIndex: ...
    def strip(self, to_strip: Optional[str] = ...) -> SeriesOrIndex: ...
    def lstrip(self, to_strip: Optional[str] = ...) -> SeriesOrIndex: ...
    def rstrip(self, to_strip: Optional[str] = ...) -> SeriesOrIndex: ...
    def wrap(self, width: int, expand_tabs: bool = ..., replace_whitespace: bool = ..., drop_whitespace: bool = ..., break_long_words: bool = ..., break_on_hyphens: bool = ...) -> SeriesOrIndex: ...
    def get_dummies(self, sep: str = ...) -> DataFrame: ...
    def translate(self, table: Dict[AnyStr, Optional[AnyStr]]) -> SeriesOrIndex: ...
    def count(self, pat: str, flags: int) -> SeriesOrIndex: ...
    def startswith(self, pat: str, na: Scalar = ...) -> SeriesOrIndex: ...
    def endswith(self, pat: str, na: Scalar = ...) -> SeriesOrIndex: ...
    def extract(self, pat: str, flags: int = ..., expand: bool = ...) -> Union[FrameOrSeries, Index]: ...
    def extractall(self, pat: str, flags: int = ...) -> DataFrame: ...
    def find(self, sub: str, start: int = ..., end: Optional[int] = ...) -> SeriesOrIndex: ...
    def findall(self, sub: str, start: int = ..., end: Optional[int] = ...) -> SeriesOrIndex: ...
    def rfind(self, sub: str, start: int = ..., end: Optional[int] = ...) -> SeriesOrIndex: ...
    def normalize(self, form: NormalizeForm) -> SeriesOrIndex: ...
    def index(self, sub: str, start: int = ..., end: Optional[int] = ...) -> SeriesOrIndex: ...
    def rindex(self, sub: str, start: int = ..., end: Optional[int] = ...) -> SeriesOrIndex: ...
    def len(self) -> SeriesOrIndex: ...
    def lower(self) -> SeriesOrIndex: ...
    def upper(self) -> SeriesOrIndex: ...
    def title(self) -> SeriesOrIndex: ...
    def capitalize(self) -> SeriesOrIndex: ...
    def swapcase(self) -> SeriesOrIndex: ...
    def casefold(self) -> SeriesOrIndex: ...
    def isalnum(self) -> SeriesOrIndex: ...
    def isalpha(self) -> SeriesOrIndex: ...
    def isdigit(self) -> SeriesOrIndex: ...
    def isspace(self) -> SeriesOrIndex: ...
    def islower(self) -> SeriesOrIndex: ...
    def isupper(self) -> SeriesOrIndex: ...
    def istitle(self) -> SeriesOrIndex: ...
    def isnumeric(self) -> SeriesOrIndex: ...
    def idecimal(self) -> SeriesOrIndex: ...
